exports[`test renders ChannelDetail 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <div
    className={undefined}>
    <nav>
        <Link
            onlyActiveOnIndex={false}
            style={Object {}}
            to="/">
            CHANNELS /
        </Link>
        <h1>
            general
        </h1>
    </nav>
    <div
        className={undefined}>
        <div
            className={undefined}>
            No members
        </div>
    </div>
    <div
        className={undefined}>
        <Connect(MessageStats)
            channel="general"
            messages={undefined} />
    </div>
</div>,
  "nodes": Array [
    <div
      className={undefined}>
      <nav>
            <Link
                  onlyActiveOnIndex={false}
                  style={Object {}}
                  to="/">
                  CHANNELS /
            </Link>
            <h1>
                  general
            </h1>
      </nav>
      <div
            className={undefined}>
            <div
                  className={undefined}>
                  No members
            </div>
      </div>
      <div
            className={undefined}>
            <Connect(MessageStats)
                  channel="general"
                  messages={undefined} />
      </div>
</div>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <ChannelDetail
        data={
                Object {
                        "id": "id",
                        "name": "general",
                      }
        }
        getChannel={[Function]}
        isLoading={false}
        params={
                Object {
                        "channelId": "id",
                      }
        }
        team="team name" />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ChannelDetail {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "data": Object {
            "id": "id",
            "name": "general",
          },
          "getChannel": [Function],
          "isLoading": false,
          "params": Object {
            "channelId": "id",
          },
          "team": "team name",
        },
        "refs": Object {},
        "renderMembers": [Function],
        "state": Object {},
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <div
          className={undefined}>
          <nav>
                    <Link
                              onlyActiveOnIndex={false}
                              style={Object {}}
                              to="/">
                              CHANNELS /
                    </Link>
                    <h1>
                              general
                    </h1>
          </nav>
          <div
                    className={undefined}>
                    <div
                              className={undefined}>
                              No members
                    </div>
          </div>
          <div
                    className={undefined}>
                    <Connect(MessageStats)
                              channel="general"
                              messages={undefined} />
          </div>
</div>,
        "_debugID": 2,
        "_renderedOutput": <div
          className={undefined}>
          <nav>
                    <Link
                              onlyActiveOnIndex={false}
                              style={Object {}}
                              to="/">
                              CHANNELS /
                    </Link>
                    <h1>
                              general
                    </h1>
          </nav>
          <div
                    className={undefined}>
                    <div
                              className={undefined}>
                              No members
                    </div>
          </div>
          <div
                    className={undefined}>
                    <Connect(MessageStats)
                              channel="general"
                              messages={undefined} />
          </div>
</div>,
      },
      "_renderedNodeType": 0,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ChannelDetail
    data={
        Object {
            "id": "id",
            "name": "general",
          }
    }
    getChannel={[Function]}
    isLoading={false}
    params={
        Object {
            "channelId": "id",
          }
    }
    team="team name" />,
}
`;
